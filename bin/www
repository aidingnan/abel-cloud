#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app')
var debug = require('debug')('abel:server')
var http = require('http')
const db = require('mysql')
const config = require('getconfig')
const promise = require('bluebird')
const AWS = require('aws-sdk')

/**
 * 初始化AWS tokenKeys cloudKeys
 */

const ssm = new AWS.SSM({
  region: 'cn-north-1'
})

const iot = new AWS.Iot({
  region: 'cn-north-1'
})

const s3 = new AWS.S3({
  region: 'cn-north-1'
})

const iotData = new AWS.IotData({
  region: 'cn-north-1',
  endpoint: 'a3dc7azfqxif0n.iot.cn-north-1.amazonaws.com.cn'
})

ssm.getParameters({ Names: ['iot', 'rds', 'rds-test'] }, (err, data) => {
  try {
    if (err) throw err
    let type = process.env.NODE_ENV == 'test' ? 'rds-test' : 'rds'
    let mysql = JSON.parse(data.Parameters.find(item => item.Name == type).Value)
    // 初始化 mysql
    var pool = db.createPool({
      host: mysql.host,
      user: mysql.user,
      password: mysql.password,
      database: mysql.dbname,
      multipleStatements: true
    });

    global.pool = promise.promisifyAll(pool)

  } catch (error) { console.log(error) }
})

global.getParameterAsync = promise.promisify(ssm.getParameter).bind(ssm)
global.describeCertificateAsync = promise.promisify(iot.describeCertificate).bind(iot)
global.publishAsync = promise.promisify(iotData.publish).bind(iotData)
global.uploadAsync = promise.promisify(s3.upload).bind(s3)

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.port);
app.set('port', config.port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      console.log(error)
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// process.on('SIGINT', () => {
//   console.log('SIGINT signal received')
//   process.exit(0)
// })

module.exports = server
